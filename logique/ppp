—q1

Inductive entier : Set :=
    I : entier
  | PS : entier -> entier.

Fixpoint plus (n m : entier) : entier :=
  match n with
  | I => PS m
  | PS n' => PS (plus n' m)
  end.
Theorem associativite:forall (n m p : entier) ,plus n (plus m p) = plus (plus n m) p.




Proof.

intros.

induction n.

reflexivity.

simpl.

rewrite IHn.

reflexivity.

Qed.






-----Q2
Inductive entier : Type :=
  | O : entier
  | S : entier -> entier.


Fixpoint plus (n m : entier) : entier :=
  match n with
    | O => m
    | S n' => S (plus n' m)
  end.
Lemma plus0 (n : entier) : plus n O = n.
Proof.
unfold plus.
induction n.

reflexivity.
simpl.
rewrite  IHn.
reflexivity.
Qed.


----Q3
Inductive entier : Type :=
  | O : entier
  | S : entier -> entier.


Fixpoint plus (n m : entier) : entier :=
  match n with
    | O => m
    | S n' => S (plus n' m)
  end.
Lemma plusS (n p : entier) : plus n (S p) = S (plus n p).
Proof.
unfold plus.
induction n.

reflexivity.
simpl.
rewrite  IHn.
reflexivity.
Qed.


——Q4
Inductive entier : Set :=
    I : entier
  | PS : entier -> entier.

Fixpoint plus (n m : entier) : entier :=
  match n with
  | I => PS m
  | PS n' => PS (plus n' m)
  end.
Theorem associativite:forall (n m p : entier) ,plus n (plus m p) = plus (plus n m) p.

Proof.

intros.

induction n.

reflexivity.

simpl.

rewrite IHn.

reflexivity.

Qed.

Theorem symetrie : forall(n m : entier),plus n m = plus m n.

Proof.

intros.

assert (plus I m = plus m I).

induction m.

reflexivity.

replace (PS m) with (plus I m).

rewrite <- associativite.

rewrite <- IHm.

reflexivity.

reflexivity.

induction n.

rewrite H.

reflexivity.

replace (PS n) with (plus I n).

rewrite associativite.

rewrite <- H.

rewrite <- associativite.

rewrite IHn.

rewrite <- associativite.

reflexivity.

reflexivity.

Qed.


---Q5
